import React, { useEffect, useState } from "react";
import { View, Text, ScrollView, StyleSheet } from "react-native";
import { createClient, SupabaseClient } from "@supabase/supabase-js";
import BookDetailPopup from "../../components/BookDetailPopup"; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c
import BookListByCategory from "../../components/BookListByCategory"; 
// import Header from "../../components/Header"; 

// === INTERFACES ===
interface BookListItem {
  id?: string;
  book_uuid: string;
  title: string;
  book_categories: { category_id: string }[];
  [key: string]: any; 
}
interface Category {
  id: string;
  name: string;
  books: BookListItem[];
}

// === KH·ªûI T·∫†O SUPABASE CLIENT ===
const supabaseUrl: string = process.env.EXPO_PUBLIC_SUPABASE_URL || '';
const supabaseAnonKey: string = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || '';
const supabase: SupabaseClient = createClient(supabaseUrl, supabaseAnonKey); 

// === COMPONENT CH√çNH: HOME ===
export default function Home({ navigation }: any): JSX.Element {
const [categories, setCategories] = useState<Category[]>([]);
const [booksByCategory, setBooksByCategory] = useState<Record<string, BookListItem[]>>({});
const [allBooks, setAllBooks] = useState<BookListItem[]>([]);
const [loading, setLoading] = useState<boolean>(true);

// State qu·∫£n l√Ω Pop-up
const [selectedBookForPopup, setSelectedBookForPopup] = useState<BookListItem | null>(null);
const [isPopupVisible, setIsPopupVisible] = useState<boolean>(false);

const [languageId] = useState<string>("4846240843956224");

useEffect(() => {
 const fetchData = async () => {
 setLoading(true);
 console.log("üêõ DEBUG: B·∫Øt ƒë·∫ßu fetch d·ªØ li·ªáu s√°ch v√† danh m·ª•c.");

 // 1. L·∫•y categories
 const { data: categoriesData } = await supabase.from("categories").select("*").order("created_at");
 setCategories((categoriesData as Category[]) || []);

 // 2. L·∫•y books: INNER JOIN ƒë·ªÉ l·ªçc s√°ch ƒë√£ d·ªãch
 const { data: booksData, error: booksError } = await supabase
  .from("books")
  .select(`*, book_categories(*), book_content(*)`)
  .innerJoin("book_languages", (query) => 
  query.eq("language_id", languageId)
  )
  .order("created_at", { ascending: false });

 if (booksError) {
  console.error("‚ùå L·ªói Supabase khi l·∫•y s√°ch:", booksError);
 } 

 const rawBooks = booksData as BookListItem[] || [];
 const validBooks = rawBooks.filter(b => b.book_uuid);

    if (rawBooks.length > 0 && validBooks.length === 0) {
        console.error("‚ö†Ô∏è L·ªñI D·ªÆ LI·ªÜU BAN ƒê·∫¶U: Kh√¥ng c√≥ cu·ªën s√°ch n√†o c√≥ thu·ªôc t√≠nh 'book_uuid'.");
    } else {
        console.log(`‚úÖ DEBUG: ƒê√£ load ${validBooks.length} cu·ªën s√°ch h·ª£p l·ªá.`);
    }

 setAllBooks(validBooks);

 // 3. Gom s√°ch theo category
 const grouped: Record<string, BookListItem[]> = {};
 validBooks.forEach((book) => {
  book.book_categories?.forEach((bc) => { 
  if (!grouped[bc.category_id]) grouped[bc.category_id] = [];
  grouped[bc.category_id].push(book);
  });
 });

 setBooksByCategory(grouped);
 setLoading(false);
 };

 fetchData();
}, [languageId]);
 
// üî• FIX: H√†m x·ª≠ l√Ω khi click v√†o s√°ch (Ki·ªÉm tra an to√†n tr∆∞·ªõc khi ƒë·∫∑t state)
const handleBookClick = (book: BookListItem) => {
    const uuid = book.book_uuid || book.id;

    if (!book || !uuid) {
        console.error("‚ùå L·ªñI CLICK: ƒê·ªëi t∆∞·ª£ng s√°ch ƒë∆∞·ª£c truy·ªÅn l√† null ho·∫∑c thi·∫øu book_uuid/id.", book);
        return; 
    }
    
    console.log("‚úÖ DEBUG: X·ª≠ l√Ω click cho s√°ch UUID:", uuid);

   setSelectedBookForPopup(book);
   setIsPopupVisible(true);
};

// üî• FIX: T√°ch h√†m ƒë√≥ng Pop-up ƒë·ªÉ qu·∫£n l√Ω state an to√†n
const handleClosePopup = () => {
    console.log("üêõ DEBUG: ƒê√≥ng Pop-up v√† reset state.");
    setIsPopupVisible(false);
    setSelectedBookForPopup(null); 
};


if (loading) {
 return (
 <View style={styles.loadingContainer}>
  <Text>ƒêang t·∫£i danh s√°ch s√°ch...</Text>
 </View>
 );
}

// L·ªçc danh m·ª•c ch·ªâ hi·ªÉn th·ªã nh·ªØng c√°i c√≥ s√°ch
const categoryList: Category[] = categories
 .map((cat) => ({ 
    ...cat, 
    books: booksByCategory[cat.id] || [] 
  }))
 .filter((cat) => cat.books.length > 0);

return (
 <View style={{ flex: 1, backgroundColor: "#f9fafb" }}>
 {/* <Header navigation={navigation} /> */}

 <ScrollView contentContainerStyle={{ paddingTop: 0 }}>
  
  <BookListByCategory 
      categories={categoryList} 
      onBookClick={handleBookClick} 
    />

 </ScrollView>
 	 
 {/* RENDER POPUP */}
 {isPopupVisible && selectedBookForPopup && ( // Ch·ªâ c·∫ßn ki·ªÉm tra state c√≥ t·ªìn t·∫°i
  <BookDetailPopup 
  book={selectedBookForPopup} 
  onClose={handleClosePopup} // üî• TRUY·ªÄN H√ÄM ƒê√ìNG ƒê√É T√ÅCH
  />
 )}
 </View>
);
}

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  }
});