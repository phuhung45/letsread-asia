import { createClient } from "@supabase/supabase-js";

// ‚úÖ Kh·ªüi t·∫°o Supabase client
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!;
export const supabase = createClient(supabaseUrl, supabaseKey);

// ‚úÖ L·∫•y danh s√°ch s√°ch (d√πng tr√™n HomeScreen)
export async function getBooks() {
  const { data, error } = await supabase
    .from("books")
    .select("book_uuid, title, author, cover_image, description, reading_level, pages")
    .order("title", { ascending: true });

  if (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch s√°ch:", error);
    throw error;
  }

  return data;
}

// ‚úÖ L·∫•y chi ti·∫øt s√°ch + ng√¥n ng·ªØ (BookDetailPopup)
export async function getBookWithLanguages(book_uuid: string) {
  console.log("üìò Fetching book detail for:", book_uuid);

  const { data, error } = await supabase
    // ‚ö†Ô∏è T√™n function ph·∫£i tr√πng ch√≠nh x√°c v·ªõi SQL trong Supabase
    .rpc("get_book_detail", { input_book_uuid: book_uuid })
    .single();

  if (error) {
    console.error("‚ùå L·ªói Supabase:", error);
    console.error("Chi ti·∫øt l·ªói:", error);
    throw error;
  }

  console.log("‚úÖ Book detail fetched:", data);
  return data;
}

// ‚úÖ L·∫•y danh s√°ch ng√¥n ng·ªØ c√≥ s·∫µn (dropdown ch·ªçn language)
export async function getLanguages() {
  const { data, error } = await supabase
    .from("languages")
    .select("id, name, code")
    .order("name", { ascending: true });

  if (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ng√¥n ng·ªØ:", error);
    throw error;
  }

  return data;
}

// ‚úÖ L·∫•y danh s√°ch categories (n·∫øu c·∫ßn l·ªçc)
export async function getCategories() {
  const { data, error } = await supabase
    .from("categories")
    .select("id, name")
    .order("name", { ascending: true });

  if (error) {
    console.error("‚ùå L·ªói khi l·∫•y categories:", error);
    throw error;
  }

  return data;
}
